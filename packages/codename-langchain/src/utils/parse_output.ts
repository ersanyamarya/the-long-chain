import { OpenAI } from 'langchain/llms/openai'
import { OutputFixingParser, StructuredOutputParser } from 'langchain/output_parsers'
import { Logger } from 'winston'
import { ZodTypeAny } from 'zod'

/**
 * The function `parseOutput` takes in an output string, a parsed response object, an OpenAI instance,
 * a structured output parser, and a logger, and attempts to parse the output using the parser. If
 * parsing fails, it attempts to fix the parser and parse the output again. Finally, it logs the
 * parsing result and returns the parsed response.
 * @param {string} output - The `output` parameter is a string that represents the output generated by
 * a function or process.
 * @param {T} parsedResponse - The `parsedResponse` parameter is the initial value of the parsed
 * response. It is of type `T`, which means it can be any type specified when calling the `parseOutput`
 * function.
 * @param {OpenAI} llm - The `llm` parameter is an instance of the `OpenAI` class, which is used to
 * make API calls to the OpenAI service. It provides methods for sending requests and handling
 * responses.
 * @param parser - The `parser` parameter is an instance of `StructuredOutputParser<ZodTypeAny>`. It is
 * responsible for parsing the output string and returning a structured response of type `T`. The
 * `parse` method of the parser is called to perform the parsing.
 * @param {Logger} logger - The `logger` parameter is an instance of a logger object that is used to
 * log information and errors during the parsing process. It is used to track the progress of the
 * parsing and to log any errors that occur.
 * @returns The function `parseOutput` returns a Promise of type `T`, which is the parsed response.
 */
export async function parseOutput<T>(
  output: string,
  parsedResponse: T,
  llm: OpenAI,
  parser: StructuredOutputParser<ZodTypeAny>,
  logger: Logger
): Promise<T> {
  try {
    logger.info('-----------------Parsing Response-----------------')
    parsedResponse = await parser.parse(output)
  } catch (error) {
    logger.info('-----------------Parsing Failed-----------------')
    logger.error(error)
    logger.info('-----------------Fixing Parser-----------------')

    try {
      const fixParser = OutputFixingParser.fromLLM(llm, parser)
      parsedResponse = await fixParser.parse(output)
    } catch (error) {
      logger.error(error)
    }
  }
  logger.info('-----------------Response Parsed-----------------')
  return parsedResponse
}
